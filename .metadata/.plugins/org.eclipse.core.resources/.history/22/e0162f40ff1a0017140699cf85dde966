package Problems;

public class MedianTwoArrays {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        double med1 = findMedian(nums1);
        double med2 = findMedian(nums2);
        
        if (nums1.length == 1 && nums2.length ==1) {
            return (nums1[0] + nums2[0])/2;
        }
     
        int[] newNums1 = new int[nums1.length/2]; 
        int[] newNums2 = new int[nums2.length/2]; 
        if (med1 > med2) {
            System.arraycopy(nums1, 0, newNums1, 0, (nums1.length)/2 + nums1.length % 2 == 0 ? 0:1 );
            System.arraycopy(nums2, nums2.length/2, newNums2, 0, (nums2.length)/2 + nums2.length % 2 == 0 ? 0:1 );
        } else {
            System.arraycopy(nums2, 0, newNums2, 0, (nums2.length)/2 + nums2.length % 2 == 0 ? 0:1 );
            System.arraycopy(nums1, nums1.length/2, newNums1, 0, (nums1.length)/2 + nums1.length % 2 == 0 ? 0:1 );
        }
        
        return findMedianSortedArrays(newNums1, newNums2);
        
    }
    
    
    public double findMedian(int[] nums) {
        if (nums.length % 2 == 0) {
            return (nums[(nums.length)/2] + nums[(nums.length)/2 + 1])/2;
        } else {
            return nums[(nums.length)/2];
        }
    }
    
    public static void main(String[] args) {
    	int[] nums1 = new int[]{1, 3};
    	int[] nums2 = new int[]{2};
    	
    	System.out.println(findMedianSortedArrays(nums1, nums2));
    	
    }
}